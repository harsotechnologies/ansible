---
- name: Configure VPN on FortiGate using HTTPAPI
  hosts: fortigates
  gather_facts: no
  vars: 
      local_gw: "192.168.1.12"
      remote_gw: "192.168.2.11"
      psksecret: "PruebasMilton123"
      name_phase1: "vpn_phase1"
      int_id: "port1"
      name_phase2: "vpn_phase2"
      lan_subnet1: "192.168.3.0/24"
      lan_subnet2: "192.168.4.0/24" 
      objects_name1: "red-harso"
      objects_name2: "red-corpo" 
      
      # Definición de los objetos que se crearán
      firewall_addresses1:
          - name: "{{ objects_name1 }}-local"
            subnet: "{{ lan_subnet1 }}"
            type: "ipmask"
            comment: "Subred local para Harso"
          - name: "{{ objects_name2 }}-remota"
            subnet: "{{ lan_subnet2 }}"
            type: "ipmask"
            comment: "Dirección para la lan remota del corporativo"

      firewall_addresses2:
          - name: "{{ objects_name2 }}-local"
            subnet: "{{ lan_subnet2 }}"
            type: "ipmask"
            comment: "Subred local para Corp"
          - name: "{{ objects_name1 }}-remota"
            subnet: "{{ lan_subnet1 }}"
            type: "ipmask"
            comment: "Dirección para la lan remota de Harso"      
    
      addrgrp_list1:
          - 
            name: "redes-locales"
            member:
              - name: "{{ objects_name1 }}-local"
            comment: "Grupo que incluye la subred local"
          - 
            name: "redes-remotas"
            member:
            - name: "{{ objects_name2 }}-remota"
            comment: "Grupo que incluye la subred remota"
      addrgrp_list2:
          - name: "redes-locales"
            member: 
               - name: "{{ objects_name2}}-local"
            comment: "Grupo que incluye la subred local"
          - name: "redes-remotas"
            member:
              - name: "{{ objects_name1 }}-remota"
            comment: "Grupo que incluye la subred remotas"
      
      firewall_policies:
          - 
              policyid: "{{ next_policyid }}"
              name: "Política pruebas automatización entrada"
              nat: "disable"
              action: "accept"
              schedule: "always"
              srcintf: 
                - name: "port2"   #puerto de lan  
              dstintf: 
                - name: "vpn_phase1"
              srcaddr:
                - name: "redes-locales"
              dstaddr: 
                - name: "redes-remotas"
              service: 
                - name: "ALL"
          - 
              policyid: "{{ (next_policyid | int) + 1 }}"
              name: "Política pruebas automatización reverso"
              nat: "disable"
              action: "accept"
              schedule: "always"
              srcintf: 
                - name: "vpn_phase1"
              dstintf: 
                - name: "port2"  #puerto lan
              srcaddr:
                - name: "redes-remotas"
              dstaddr: 
                - name: "redes-locales"
              service: 
                - name: "ALL"

      firewall_policies_servicio_web:
          - 
              policyid: "{{ next_policyid }}"
              name: "Política para servicio web entrada"
              nat: "disable"
              action: "accept"
              schedule: "always"
              srcintf: 
                - name: "port2"   #puerto de lan  
              dstintf: 
                - name: "port1"
              srcaddr:
                - name: "redes-locales"
              dstaddr: 
                - name: "redes-remotas"
              service: 
                - name: "ALL"
          - 
              policyid: "{{ (next_policyid | int) + 1 }}"
              name: "Política para servicio web reverso"
              nat: "disable"
              action: "accept"
              schedule: "always"
              srcintf: 
                - name: "port1"
              dstintf: 
                - name: "port2"  #puerto lan
              srcaddr:
                - name: "redes-remotas"
              dstaddr: 
                - name: "redes-locales"
              service: 
                - name: "ALL"
      
      firewall_policies_servicio_tftp:
          - 
              policyid: "{{ next_policyid }}"
              name: "Política para servicio tftp entrada"
              nat: "disable"
              action: "accept"
              schedule: "always"
              srcintf: 
                - name: "port2"   #puerto de lan  
              dstintf: 
                - name: "port1"
              srcaddr:
                - name: "redes-locales"
              dstaddr: 
                - name: "redes-remotas"
              service: 
                - name: "ALL"
          - 
              policyid: "{{ (next_policyid | int) + 1 }}"
              name: "Política para servicio tftp reverso"
              nat: "disable"
              action: "accept"
              schedule: "always"
              srcintf: 
                - name: "port1"
              dstintf: 
                - name: "port2"  #puerto lan
              srcaddr:
                - name: "redes-remotas"
              dstaddr: 
                - name: "redes-locales"
              service: 
                - name: "ALL"          

              
  tasks:

#CREACION DE UNA VPN
  #Configura los peersc
    - name: Configure IPsec Phase 1 Interface fw1
      fortios_vpn_ipsec_phase1_interface:
        vdom: "root"
        state: "present"
        vpn_ipsec_phase1_interface:
          name: "{{ name_phase1 }}"
          interface: "{{ int_id }}"
          local_gw:   "{{ local_gw }}"                
          remote_gw: "{{ remote_gw }}"
          psksecret: "{{ psksecret }}"
          type: "static"
          keylife: "28800"
          peertype: "any"
          net_device: "enable"
          proposal: "aes256-sha1"
      when: ansible_host == local_gw

    - name: Configure IPsec Phase 1 Interface fw2
      fortios_vpn_ipsec_phase1_interface:
        vdom: "root"
        state: "present"
        vpn_ipsec_phase1_interface:
          name: "{{ name_phase1 }}"
          interface: "{{ int_id }}"
          local_gw:   "{{ remote_gw }}"                
          remote_gw: "{{ local_gw }}"
          psksecret: "{{ psksecret }}"
          type: "static"
          keylife: "28800"
          peertype: "any"
          net_device: "enable"
          proposal: "aes256-sha1"
      when: not  ansible_host == local_gw 

  #Crea objetos de las redes locales y remotas (listo)
    - name: Crear múltiples objetos de dirección IP para fw1
      fortios_firewall_address:
        vdom: "root"
        state: "present"
        firewall_address: "{{ item }}"
      loop: "{{ firewall_addresses1 }}"
      when: ansible_host == local_gw
    
    - name: Crear múltiples objetos de dirección IP para fw2
      fortios_firewall_address:
        vdom: "root"
        state: "present"
        firewall_address: "{{ item }}"
      loop: "{{ firewall_addresses2 }}"
      when: not ansible_host == local_gw  

    #Crea objetos de las redes locales y remotas y las meta a un grupo  (listo)
    - name: Crear múltiples grupos de direcciones fw1
      fortios_firewall_addrgrp:
        vdom: "root"
        state: "present"
        firewall_addrgrp: "{{ item }}"
      loop: "{{ addrgrp_list1 }}"
      when: ansible_host == local_gw
      
    - name: Crear múltiples grupos de direcciones fw2
      fortios_firewall_addrgrp:
          vdom: "root"
          state: "present"
          firewall_addrgrp: "{{ item }}"
      loop: "{{ addrgrp_list2 }}"
      when: not ansible_host == local_gw
   
#Crear ruta estatica entre las lans  (una que vaya haci la red-lan remota usando la vpn)f
# y otra la por defecto para que el trafico lo mande a internet
    - name: Configure a static route fw1
      fortios_router_static:
        vdom: "root"
        state: "present"
        router_static:
          seq_num: 10  
          dst: "{{ lan_subnet2 }}" 
          #gateway: "192.168.1.1"  
          device: "{{ name_phase1 }}"  
          comment: "Ruta estática a la red  {{ lan_subnet2 }}" 
      when: ansible_host == local_gw
    
    - name: Configure a static route fw2
      fortios_router_static:
        vdom: "root"
        state: "present"
        router_static:
          seq_num: 10  
          dst: "{{ lan_subnet1 }}" 
          #gateway: "{{ name_phase1  }}"  
          device: "{{ name_phase1 }}"  
          comment: "Ruta estática a la red {{lan_subnet1}}" 
      when: not ansible_host == local_gw             

#Configura la vpn //esta fallando al asignar los objetos
    - name: Configure IPsec Phase 2 Interface ambos fw1
      fortios_vpn_ipsec_phase2_interface:
        vdom: "root"
        state: "present"
        vpn_ipsec_phase2_interface:
          #add_route: "phase1"
          phase1name: "{{ name_phase1 }}"
          name: "{{ name_phase2 }}"
          src_name: "redes-locales"
          dst_name: "redes-remotas"
          proposal: "aes256-sha1"
          pfs: "enable"
          keylifeseconds: "3600"
         

 #Falta crear la poltica bidireccional. (que vaya hacia las redes remotas y viceversa) desactivando NAT, el id de la  politca lo crea autimaticamente 
    - name: Obtener la lista de políticas de firewall usando fortios_configuration_fact
      fortios_configuration_fact:
        vdom: "root"
        selector: "firewall_policy"
      register: firewall_policy_data

    - name: Calcular el siguiente policyid disponible
      set_fact:
        next_policyid: "{{ (firewall_policy_data.meta.results | map(attribute='policyid') | map('int') | max | default(0)) + 1 }}"

    
    - name: Crear políticas de firewall
      fortios_firewall_policy:
        vdom: "root"
        state: "present"
        firewall_policy:  "{{ item }}"
      loop: "{{ firewall_policies }}"


#FILTRADO DE TRAFICO CON BASE A POLITICAS 

# PC2 y PC5 en la red corporativo tnedran accceso al servidor TFTP, browser solo tendra acceso al servidor web.
    - name: Obtener la lista de políticas de firewall usando fortios_configuration_fact 
      fortios_configuration_fact:
        vdom: "root"
        selector: "firewall_policy"
      register: firewall_policy_data
 
    - name: Calcular el siguiente policyid disponible
      set_fact:
        next_policyid: "{{ (firewall_policy_data.meta.results | map(attribute='policyid') | map('int') | max | default(0)) + 1 }}"

    - name: Crear políticas de filtrado servicio web
      fortios_firewall_policy:
        vdom: "root"
        state: "present"
        firewall_policy:  "{{ item }}"
      loop: "{{ firewall_policies_servicio_web }}"
      

    - name: Obtener la lista de políticas de firewall usando fortios_configuration_fact 
      fortios_configuration_fact:
        vdom: "root"
        selector: "firewall_policy"
      register: firewall_policy_data
 
    - name: Calcular el siguiente policyid disponible
      set_fact:
        next_policyid: "{{ (firewall_policy_data.meta.results | map(attribute='policyid') | map('int') | max | default(0)) + 1 }}"
        

    - name: Crear políticas de filtrado servicio tftp
      fortios_firewall_policy:
        vdom: "root"
        state: "present"
        firewall_policy:  "{{ item }}"
      loop: "{{ firewall_policies_servicio_tftp }}"
     
#RESPALDO DE CONFIGURACION EN SERVIDOR TFTPd
    - name: Obtener la fecha actual
      ansible.builtin.shell: "date +'%Y-%m-%d'"
      register: current_date
      delegate_to: localhost

    - name: Mostrar la fecha actual
      debug:
        var: current_date.stdout
    
    - name: Ejecutar comando para hacer backup al servidor TFTP usando raw
      vars: 
        ansible_connection: ssh
      raw: "execute backup config tftp backup_fortigate-{{current_date.stdout}}.conf 172.25.10.52"
      register: backup_result





   
